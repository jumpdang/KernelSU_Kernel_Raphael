name: Kernel CI
on:
  repository_dispatch:
  workflow_dispatch:
  push:
    branches:
    - "main"
    
jobs:
  Patch_KernelSU:
    runs-on: ubuntu-latest
    env:
      KernelSU_Dir: /home/runner/work/KernelSU
      Setup_Dir: /home/runner/work/Setup_Dir
    steps:
      - name: Download KernelSU from 'KernelSU'
        id: get-kernelsu
        run: |
          mkdir $KernelSU_Dir
          git clone https://github.com/tiann/KernelSU.git $KernelSU_Dir
          
      - name: Get KernelSU id
        id: get-kernelsu-id
        run: |
          cd $KernelSU_Dir
          echo "kernelsu_id=$(git show -s --date=short --format="%h")" >> $GITHUB_ENV
          
      - name: Download Patch form 'KernelSU'
        id: get-patch
        run: |
          mkdir $Setup_Dir 
          git clone -b setup https://github.com/tiann/KernelSU.git $Setup_Dir
          
      - name: Get Patch id
        id: get-patch-id
        run: |
          cd $Setup_Dir
          echo "patch_id=$(git show -s --date=short --format="%h")" >> $GITHUB_ENV          
          
      - name: Patch Kernel
        run: |
          cp $Setup_Dir/setup.sh $KernelSU_Dir/kernel/setup.sh
          cd $KernelSU_Dir
          tar czf "KernelSU_${{ env.kernelsu_id }}_Patched_${{ env.patch_id }}.tar.gz" .[!.]* *
  
      - name: Upload KernelSU Patch
        uses: actions/upload-artifact@v3.1.2
        with:
          name: KernelSU_Patched
          path: ${{ env.KernelSU_Dir }}/KernelSU_${{ env.kernelsu_id }}_Patched_${{ env.patch_id }}.tar.gz
          retention-days: 5
          
      - name: Upload KernelSU Manager Package
        uses: actions/upload-artifact@v3.1.2
        with:
          name: KernelSU_Manager
          path: ${{ env.Setup_Dir }}/*.apk
          retention-days: 5          
          
  Collect_Config_Complie:
    needs: Patch_KernelSU
    runs-on: ubuntu-latest
    steps:
    
    - name: Collecting config
      id: collect_config
      run: |
        echo "Debug=${{ secrets.Debug }}" >> $GITHUB_ENV
        
    - name: Setting Job
      id: set_job
      if: ${{ env.Debug == 'true' }}
      run: exit 1
      
  Collect_Config_Release:
    needs: Patch_KernelSU
    runs-on: ubuntu-latest
    steps:
    
    - name: Collecting config
      id: collect_config
      run: |
        echo "ALLOW_RELEASE=${{ secrets.ALLOW_RELEASE }}" >> $GITHUB_ENV
        
    - name: Setting Job
      id: set_job
      if: ${{ env.ALLOW_RELEASE == 'false' }}
      run: exit 1    
      
        
  Complie_Evolution:
      needs: Collect_Config_Complie
      runs-on: ubuntu-latest
      env:
        CheckOut_DIR: /home/runner/work/kernel_xiaomi_raphael-ex/kernel_xiaomi_raphael-ex
        AnyKernel: /home/runner/work/kernel_xiaomi_raphael-ex/AnyKernel
        test_patch: false
      steps:

      - name: Set current time
        id: set_time
        run: echo "time=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_ENV
            
      - name: Installing Dependencies
        if: ${{ env.test_patch != 'true' }}
        run: |
          sudo apt update -y
          sudo apt-get install -y zip flex bison libncurses-dev gawk  libiberty-dev autoconf kmod bc build-essential gcc libc6 curl libstdc++6 git wget libssl-dev cpio p7zip-full ccache
          sudo apt clean
          
      - name: Clone Kernel Tree
        if: ${{ env.test_patch != 'true' }}
        run: |
          git clone https://github.com/jumpdang/kernel_xiaomi_raphael.git $CheckOut_DIR

      - name: Download KernelSU_Patched
        uses: actions/download-artifact@v3
        with:
          name: KernelSU_Patched
          path: ${{ env.CheckOut_DIR }}/KernelSU
          
      - name: Integrate KernelSU
        run: |
          cd ${{ env.CheckOut_DIR }}/KernelSU
          tar -xzf KernelSU_*_Patched_*.tar.gz
          echo "kernelsu_id=$(git show -s --date=short --format="%h")" >> $GITHUB_ENV
          git_count=$(git rev-list --count HEAD)
          kernelsu_version=$(expr 10000 + $git_count + 200)
          echo "kernelsu_version=$kernelsu_version" >> $GITHUB_ENV
          rm KernelSU_*_Patched_*.tar.gz
          cd ..
          rm -rf drivers/staging/kernelsu
          sh KernelSU/kernel/setup.sh

      - name: Cloning Sources and Toolchain
        if: ${{ env.test_patch != 'true' }}        
        run: |
          git clone https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86 --depth=1 -b master ~/clang
          git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9 -b android-10.0.0_r47 --depth=1 --single-branch --no-tags ~/aarch64-linux-android-4.9
          git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9 -b android-10.0.0_r47 --depth=1 --single-branch --no-tags ~/arm-linux-androideabi-4.9
          git clone https://github.com/SOVIET-ANDROID/AnyKernel3.git ${{ env.AnyKernel }}          

      - name: Compiling Kernel
        if: ${{ env.test_patch != 'true' }}      
        id: compile
        run: |
          CLANG=~/clang/clang-r487747c/bin
          GCC32=~/arm-linux-androideabi-4.9/bin
          GCC64=~/aarch64-linux-android-4.9/bin
          PATH=$CLANG:$GCC64:$GCC32:$PATH
          export PATH
          export ARCH=arm64
          export CLANG_TRIPLE=aarch64-linux-gnu
          export CROSS_COMPILE=aarch64-linux-android-
          export CROSS_COMPILE_ARM32=arm-linux-androideabi-
          output_dir=out
          cd ${{ env.CheckOut_DIR }}
          make LLVM=1 LLVM_IAS=1 CC="ccache clang" raphael_defconfig
          make LLVM=1 LLVM_IAS=1 CC="ccache clang" -j$(grep -c ^processor /proc/cpuinfo)
          
      - name: Packaging the Kernel
        if: ${{ env.test_patch != 'true' }}
        id: package
        run: |
          cp -v ${{ env.CheckOut_DIR }}/out/arch/arm64/boot/Image.gz-dtb ${{ env.AnyKernel }} &&
          cp -v ${{ env.CheckOut_DIR }}/out/arch/arm64/boot/dtbo.img ${{ env.AnyKernel }}/o
          cd ${{ env.AnyKernel }}
          7z a -mx9 "Raphael-Kernel_KSU_${{ env.kernelsu_version }}_${{ env.kernelsu_id }}_Evolution_13.zip" *
          
      - name: Upload output_files directory
        if: ${{ env.test_patch != 'true' }}
        uses: actions/upload-artifact@main
        with:
          name: Raphael-Kernel_KSU_Dev_Evolution_13
          path: ${{ env.AnyKernel }}/Raphael-Kernel_KSU_${{ env.kernelsu_version }}_${{ env.kernelsu_id }}_Evolution_13.zip
          
  Complie_SOVIET-ANDROID:
      needs: Collect_Config_Complie
      runs-on: ubuntu-latest
      env:
        CheckOut_DIR: /home/runner/work/kernel_xiaomi_raphael-ex/kernel_xiaomi_raphael
        AnyKernel: /home/runner/work/kernel_xiaomi_raphael-ex/AnyKernel
        test_patch: false
      steps:

      - name: Set current time
        id: set_time
        run: echo "time=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_ENV
            
      - name: Installing Dependencies
        if: ${{ env.test_patch != 'true' }}
        run: |
          sudo apt update -y
          sudo apt-get install -y zip flex bison libncurses-dev gawk  libiberty-dev autoconf kmod bc build-essential gcc libc6 curl libstdc++6 git wget libssl-dev cpio p7zip-full ccache
          sudo apt clean
          
      - name: Clone Kernel Tree
        if: ${{ env.test_patch != 'true' }}
        run: |
          git clone https://github.com/jumpdang/kernel_xiaomi_raphael.git $CheckOut_DIR

      - name: Download KernelSU_Patched
        uses: actions/download-artifact@v3
        with:
          name: KernelSU_Patched
          path: ${{ env.CheckOut_DIR }}/KernelSU
          
      - name: Integrate KernelSU
        run: |
          cd ${{ env.CheckOut_DIR }}/KernelSU
          tar -xzf KernelSU_*_Patched_*.tar.gz
          echo "kernelsu_id=$(git show -s --date=short --format="%h")" >> $GITHUB_ENV
          git_count=$(git rev-list --count HEAD)
          kernelsu_version=$(expr 10000 + $git_count + 200)
          echo "kernelsu_version=$kernelsu_version" >> $GITHUB_ENV
          rm KernelSU_*_Patched_*.tar.gz
          cd ..
          rm -rf drivers/staging/kernelsu
          sh KernelSU/kernel/setup.sh

      - name: Cloning Sources and Toolchain
        if: ${{ env.test_patch != 'true' }}        
        run: |
          git clone https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86 --depth=1 -b master ~/clang
          git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9 -b android-10.0.0_r47 --depth=1 --single-branch --no-tags ~/aarch64-linux-android-4.9
          git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9 -b android-10.0.0_r47 --depth=1 --single-branch --no-tags ~/arm-linux-androideabi-4.9
          git clone https://github.com/SOVIET-ANDROID/AnyKernel3.git ${{ env.AnyKernel }}    
          
      - name: Compiling Kernel
        if: ${{ env.test_patch != 'true' }}      
        id: compile
        run: |
          CLANG=~/clang/clang-r487747c/bin
          GCC32=~/arm-linux-androideabi-4.9/bin
          GCC64=~/aarch64-linux-android-4.9/bin
          PATH=$CLANG:$GCC64:$GCC32:$PATH
          export PATH
          export ARCH=arm64
          export CLANG_TRIPLE=aarch64-linux-gnu
          export CROSS_COMPILE=aarch64-linux-android-
          export CROSS_COMPILE_ARM32=arm-linux-androideabi-
          output_dir=out
          cd ${{ env.CheckOut_DIR }}
          make LLVM=1 LLVM_IAS=1 CC="ccache clang" raphael_defconfig
          make LLVM=1 LLVM_IAS=1 CC="ccache clang" -j$(grep -c ^processor /proc/cpuinfo)
          
      - name: Packaging the Kernel
        if: ${{ env.test_patch != 'true' }}
        id: package
        run: |
          cp -v ${{ env.CheckOut_DIR }}/out/arch/arm64/boot/Image.gz-dtb ${{ env.AnyKernel }} &&
          cp -v ${{ env.CheckOut_DIR }}/out/arch/arm64/boot/dtbo.img ${{ env.AnyKernel }}/o
          cd ${{ env.AnyKernel }}
          7z a -mx9 "Raphael-Kernel_KSU_${{ env.kernelsu_version }}_${{ env.kernelsu_id }}_SOVIET-ANDROID_13.zip" *
          
      - name: Upload output_files directory
        if: ${{ env.test_patch != 'true' }}
        uses: actions/upload-artifact@main
        with:
          name: Raphael-Kernel_KSU_Dev_SOVIET-ANDROID_13
          path: ${{ env.AnyKernel }}/Raphael-Kernel_KSU_${{ env.kernelsu_version }}_${{ env.kernelsu_id }}_SOVIET-ANDROID_13.zip          

  Complie_SOVIET-ANDROID_beta:
      needs: Collect_Config_Complie
      runs-on: ubuntu-latest
      env:
        CheckOut_DIR: /home/runner/work/kernel_xiaomi_raphael-ex/kernel_xiaomi_raphael
        AnyKernel: /home/runner/work/kernel_xiaomi_raphael-ex/AnyKernel
        test_patch: false
      steps:

      - name: Set current time
        id: set_time
        run: echo "time=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_ENV
            
      - name: Installing Dependencies
        if: ${{ env.test_patch != 'true' }}
        run: |
          sudo apt update -y
          sudo apt-get install -y zip flex bison libncurses-dev gawk  libiberty-dev autoconf kmod bc build-essential gcc libc6 curl libstdc++6 git wget libssl-dev cpio p7zip-full ccache
          sudo apt clean
          
      - name: Clone Kernel Tree
        if: ${{ env.test_patch != 'true' }}
        run: |
          git clone https://github.com/jumpdang/kernel_xiaomi_raphael.git $CheckOut_DIR

      - name: Download KernelSU_Patched
        uses: actions/download-artifact@v3
        with:
          name: KernelSU_Patched
          path: ${{ env.CheckOut_DIR }}/KernelSU
          
      - name: Integrate KernelSU
        run: |
          cd ${{ env.CheckOut_DIR }}/KernelSU
          tar -xzf KernelSU_*_Patched_*.tar.gz
          echo "kernelsu_id=$(git show -s --date=short --format="%h")" >> $GITHUB_ENV
          git_count=$(git rev-list --count HEAD)
          kernelsu_version=$(expr 10000 + $git_count + 200)
          echo "kernelsu_version=$kernelsu_version" >> $GITHUB_ENV
          rm KernelSU_*_Patched_*.tar.gz
          cd ..
          rm -rf drivers/staging/kernelsu
          sh KernelSU/kernel/setup.sh

      - name: Cloning Sources and Toolchain
        if: ${{ env.test_patch != 'true' }}        
        run: |
          git clone https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86 --depth=1 -b master ~/clang
          git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9 -b android-10.0.0_r47 --depth=1 --single-branch --no-tags ~/aarch64-linux-android-4.9
          git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9 -b android-10.0.0_r47 --depth=1 --single-branch --no-tags ~/arm-linux-androideabi-4.9
          git clone https://github.com/SOVIET-ANDROID/AnyKernel3.git ${{ env.AnyKernel }}     

      - name: Compiling Kernel
        if: ${{ env.test_patch != 'true' }}      
        id: compile
        run: |
          CLANG=~/clang/clang-r487747c/bin
          GCC32=~/arm-linux-androideabi-4.9/bin
          GCC64=~/aarch64-linux-android-4.9/bin
          PATH=$CLANG:$GCC64:$GCC32:$PATH
          export PATH
          export ARCH=arm64
          export CLANG_TRIPLE=aarch64-linux-gnu
          export CROSS_COMPILE=aarch64-linux-android-
          export CROSS_COMPILE_ARM32=arm-linux-androideabi-
          output_dir=out
          cd ${{ env.CheckOut_DIR }}
          make LLVM=1 LLVM_IAS=1 CC="ccache clang" raphael_defconfig
          make LLVM=1 LLVM_IAS=1 CC="ccache clang" -j$(grep -c ^processor /proc/cpuinfo)
          
      - name: Packaging the Kernel
        if: ${{ env.test_patch != 'true' }}
        id: package
        run: |
          cp -v ${{ env.CheckOut_DIR }}/out/arch/arm64/boot/Image.gz-dtb ${{ env.AnyKernel }} &&
          cp -v ${{ env.CheckOut_DIR }}/out/arch/arm64/boot/dtbo.img ${{ env.AnyKernel }}/o
          cd ${{ env.AnyKernel }}
          7z a -mx9 "Raphael-Kernel_KSU_${{ env.kernelsu_version }}_${{ env.kernelsu_id }}_SOVIET-ANDROID_13_beta.zip" *
          
      - name: Upload output_files directory
        if: ${{ env.test_patch != 'true' }}
        uses: actions/upload-artifact@main
        with:
          name: Raphael-Kernel_KSU_Dev_SOVIET-ANDROID_13_beta
          path: ${{ env.AnyKernel }}/Raphael-Kernel_KSU_${{ env.kernelsu_version }}_${{ env.kernelsu_id }}_SOVIET-ANDROID_13_beta.zip
          
  Release:
      needs: [Complie_Evolution,Collect_Config_Release,Complie_SOVIET-ANDROID,Complie_SOVIET-ANDROID_beta]
      runs-on: ubuntu-latest
      env:
        Release_DIR: /home/runner/work/release
      steps:
      
      - name: Set current time
        id: set_time
        run: echo "time=$(date +'%Y-%m-%d_%H-%M-%S')" >> "$GITHUB_OUTPUT"
   
      - name: Generate release tag
        id: tag
        run: |
          echo "release_tag=$(date +"%Y%m%d")" >> $GITHUB_OUTPUT
          touch release.txt
          echo "SoDebug Kernel Config：" >> release.txt
          echo "Device Code:raphael" >> release.txt
          echo "Device Name：Redmi K20 Pro | Mi 9T Pro" >> release.txt
          echo "Support Android：13.0" >> release.txt   
          echo "KernelSU Git Verion：***" >> release.txt
          echo "KernelSU Verion: *****" >> release.txt
          echo "Patch ID: *******" >> release.txt
          echo "KernelSU ID: *******" >> release.txt
          echo "Tested: undefine" >> release.txt
          echo "Build Date: $(date +"%Y/%m/%d")" >> release.txt
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.Release_DIR }}

      - name: Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v.${{ steps.tag.outputs.release_tag }}
          name: ${{ steps.tag.outputs.release_tag }} Kernel for Raphael
          body_path: release.txt
          files: |
            ${{ env.Release_DIR }}/KernelSU_Patched/*.tar.gz
            ${{ env.Release_DIR }}/KernelSU_Manager/*.apk
            ${{ env.Release_DIR }}/Raphael-Kernel_KSU_Dev_Evolution_13/*.zip
            ${{ env.Release_DIR }}/Raphael-Kernel_KSU_Dev_SOVIET-ANDROID_13/*.zip
            ${{ env.Release_DIR }}/Raphael-Kernel_KSU_Dev_SOVIET-ANDROID_13_beta/*.zip
            
